<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:p="http://www.springframework.org/schema/p"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
            http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
           http://www.springframework.org/schema/context 
           http://www.springframework.org/schema/context/spring-context-4.0.xsd
           http://www.springframework.org/schema/aop 
           http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
           http://www.springframework.org/schema/tx 
           http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

    <!-- jdbc配置 -->
    <context:property-placeholder location="classpath:config/jdbc.properties" />

  	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
    	<property name="driverClassName" value="${jdbc-0.druid.driver-class}" />
        <property name="url"             value="${jdbc-0.druid.driver-url}" />
        <property name="username"        value="${jdbc-0.user}" />
        <property name="password"        value="${jdbc-0.password}" />
        <property name="initialSize" value="${jdbc-0.druid.connection-initial-size}" />
        <property name="minIdle"     value="${jdbc-0.druid.connection-minimum-size}" />
        <property name="maxActive"   value="${jdbc-0.druid.connection-maximum-size}" />
        <property name="maxWait"     value="${jdbc-0.druid.connection-maxwait-time}" />
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc-0.druid.connection-maxactive-time}" />
        <property name="minEvictableIdleTimeMillis"    value="${jdbc-0.druid.connection-minlive-time}" />
        <property name="validationQuery" value="${jdbc-0.druid.connection-test-sql}" />
        <property name="testWhileIdle"   value="${jdbc-0.druid.test-while-idle}" />
        <property name="testOnBorrow"    value="${jdbc-0.druid.test-on-borrow}" />
        <property name="testOnReturn"    value="${jdbc-0.druid.test-on-return}" />
        <property name="poolPreparedStatements" value="${jdbc-0.druid.pool-prepared-statements}" />
        <!-- property name="maxPoolPreparedStatementPerConnectionSize" value="20" /-->
        <property name="connectionProperties" value="config.decrypt=${jdbc-0.druid.config.decrypt}" />
        <property name="filters" value="stat,config"/>
    </bean>
    
 	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:mapper/sql_map_service_config.xml" />
    </bean>
    
     <!-- 数据接口 -->
    <bean id="myBatisDAO" class="com.huonu.domain.mybatis.MyBatisDAO">
        <property name="sqlSessionFactory" ref="sqlSessionFactory" />
    </bean>
    
    <!-- 事务 -->
    <bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    
     <!-- 配置AOP，Spring是通过AOP来进行事务管理的 -->
    <aop:config>
        <!-- 设置pointCut表示哪些方法要加入事务处理 -->
        <!-- 以下的事务是声明在DAO中，但是通常都会在Service来处理多个业务对象逻辑的关系，注入删除，更新等，此时如果在执行了一个步骤之后抛出异常
            就会导致数据不完整，所以事务不应该在DAO层处理，而应该在service，这也就是Spring所提供的一个非常方便的工具，声明式事务 -->
        <aop:pointcut id="allMethods"
                      expression="execution(* com.huonu.service.impl.*.*(..))" />
        <!-- 通过advisor来确定具体要加入事务控制的方法 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="allMethods" />
    </aop:config>
    
     <!-- 配置哪些方法要加入事务控制 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 让所有的方法都加入事务管理，为了提高效率，可以把一些查询之类的方法设置为只读的事务 -->
            <!--<tx:method name="*" propagation="REQUIRED" />-->
            <!--<tx:method name="*" propagation="REQUIRED" read-only="true"/>-->
            <!-- 以下方法都是可能设计修改的方法，就无法设置为只读 -->
            <tx:method name="add*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="del*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="save*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="clear*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="move*" propagation="REQUIRED" rollback-for="Exception"/>
        </tx:attributes>
    </tx:advice>
    
</beans>         